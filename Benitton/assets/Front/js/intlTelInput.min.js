! function (t) {
  "object" == typeof module && module.exports ? module.exports = t() : window.intlTelInput = t()
}(() => {
  var t;
  return (() => {
     var t, e = Object.defineProperty,
        i = Object.getOwnPropertyDescriptor,
        s = Object.getOwnPropertyNames,
        n = Object.prototype.hasOwnProperty,
        a = (t, a, l, o) => {
           if (a && "object" == typeof a || "function" == typeof a)
              for (let r of s(a)) n.call(t, r) || r === l || e(t, r, {
                 get: () => a[r],
                 enumerable: !(o = i(a, r)) || o.enumerable
              });
           return t
        },
        l = t => a(e({}, "__esModule", {
           value: !0
        }), t),
        o = {};
     ((t, i) => {
        for (var s in i) e(t, s, {
           get: i[s],
           enumerable: !0
        })
     })(o, {
        Iti: () => L,
        default: () => x
     });
     var r = [
           ["Afghanistan", "af", "93"],
           ["Albania", "al", "355"],
           ["Algeria", "dz", "213"],
           ["American Samoa", "as", "1", 5, ["684"]],
           ["Andorra", "ad", "376"],
           ["Angola", "ao", "244"],
           ["Anguilla", "ai", "1", 6, ["264"]],
           ["Antigua & Barbuda", "ag", "1", 7, ["268"]],
           ["Argentina", "ar", "54"],
           ["Armenia", "am", "374"],
           ["Aruba", "aw", "297"],
           ["Ascension Island", "ac", "247"],
           ["Australia", "au", "61", 0],
           ["Austria", "at", "43"],
           ["Azerbaijan", "az", "994"],
           ["Bahamas", "bs", "1", 8, ["242"]],
           ["Bahrain", "bh", "973"],
           ["Bangladesh", "bd", "880"],
           ["Barbados", "bb", "1", 9, ["246"]],
           ["Belarus", "by", "375"],
           ["Belgium", "be", "32"],
           ["Belize", "bz", "501"],
           ["Benin", "bj", "229"],
           ["Bermuda", "bm", "1", 10, ["441"]],
           ["Bhutan", "bt", "975"],
           ["Bolivia", "bo", "591"],
           ["Bosnia & Herzegovina", "ba", "387"],
           ["Botswana", "bw", "267"],
           ["Brazil", "br", "55"],
           ["British Indian Ocean Territory", "io", "246"],
           ["British Virgin Islands", "vg", "1", 11, ["284"]],
           ["Brunei", "bn", "673"],
           ["Bulgaria", "bg", "359"],
           ["Burkina Faso", "bf", "226"],
           ["Burundi", "bi", "257"],
           ["Cambodia", "kh", "855"],
           ["Cameroon", "cm", "237"],
           ["Canada", "ca", "1", 1, ["204", "226", "236", "249", "250", "263", "289", "306", "343", "354", "365", "367", "368", "382", "387", "403", "416", "418", "428", "431", "437", "438", "450", "584", "468", "474", "506", "514", "519", "548", "579", "581", "584", "587", "604", "613", "639", "647", "672", "683", "705", "709", "742", "753", "778", "780", "782", "807", "819", "825", "867", "873", "902", "905"]],
           ["Cape Verde", "cv", "238"],
           ["Caribbean Netherlands", "bq", "599", 1, ["3", "4", "7"]],
           ["Cayman Islands", "ky", "1", 12, ["345"]],
           ["Central African Republic", "cf", "236"],
           ["Chad", "td", "235"],
           ["Chile", "cl", "56"],
           ["China", "cn", "86"],
           ["Christmas Island", "cx", "61", 2, ["89164"]],
           ["Cocos (Keeling) Islands", "cc", "61", 1, ["89162"]],
           ["Colombia", "co", "57"],
           ["Comoros", "km", "269"],
           ["Congo - Brazzaville", "cg", "242"],
           ["Congo - Kinshasa", "cd", "243"],
           ["Cook Islands", "ck", "682"],
           ["Costa Rica", "cr", "506"],
           ["C\xf4te d’Ivoire", "ci", "225"],
           ["Croatia", "hr", "385"],
           ["Cuba", "cu", "53"],
           ["Cura\xe7ao", "cw", "599", 0],
           ["Cyprus", "cy", "357"],
           ["Czech Republic", "cz", "420"],
           ["Denmark", "dk", "45"],
           ["Djibouti", "dj", "253"],
           ["Dominica", "dm", "1", 13, ["767"]],
           ["Dominican Republic", "do", "1", 2, ["809", "829", "849"]],
           ["Ecuador", "ec", "593"],
           ["Egypt", "eg", "20"],
           ["El Salvador", "sv", "503"],
           ["Equatorial Guinea", "gq", "240"],
           ["Eritrea", "er", "291"],
           ["Estonia", "ee", "372"],
           ["Eswatini", "sz", "268"],
           ["Ethiopia", "et", "251"],
           ["Falkland Islands", "fk", "500"],
           ["Faroe Islands", "fo", "298"],
           ["Fiji", "fj", "679"],
           ["Finland", "fi", "358", 0],
           ["France", "fr", "33"],
           ["French Guiana", "gf", "594"],
           ["French Polynesia", "pf", "689"],
           ["Gabon", "ga", "241"],
           ["Gambia", "gm", "220"],
           ["Georgia", "ge", "995"],
           ["Germany", "de", "49"],
           ["Ghana", "gh", "233"],
           ["Gibraltar", "gi", "350"],
           ["Greece", "gr", "30"],
           ["Greenland", "gl", "299"],
           ["Grenada", "gd", "1", 14, ["473"]],
           ["Guadeloupe", "gp", "590", 0],
           ["Guam", "gu", "1", 15, ["671"]],
           ["Guatemala", "gt", "502"],
           ["Guernsey", "gg", "44", 1, ["1481", "7781", "7839", "7911"]],
           ["Guinea", "gn", "224"],
           ["Guinea-Bissau", "gw", "245"],
           ["Guyana", "gy", "592"],
           ["Haiti", "ht", "509"],
           ["Honduras", "hn", "504"],
           ["Hong Kong", "hk", "852"],
           ["Hungary", "hu", "36"],
           ["Iceland", "is", "354"],
           ["India", "in", "91"],
           ["Indonesia", "id", "62"],
           ["Iran", "ir", "98"],
           ["Iraq", "iq", "964"],
           ["Ireland", "ie", "353"],
           ["Isle of Man", "im", "44", 2, ["1624", "74576", "7524", "7924", "7624"]],
           ["Israel", "il", "972"],
           ["Italy", "it", "39", 0],
           ["Jamaica", "jm", "1", 4, ["876", "658"]],
           ["Japan", "jp", "81"],
           ["Jersey", "je", "44", 3, ["1534", "7509", "7700", "7797", "7829", "7937"]],
           ["Jordan", "jo", "962"],
           ["Kazakhstan", "kz", "7", 1, ["33", "7"]],
           ["Kenya", "ke", "254"],
           ["Kiribati", "ki", "686"],
           ["Kosovo", "xk", "383"],
           ["Kuwait", "kw", "965"],
           ["Kyrgyzstan", "kg", "996"],
           ["Laos", "la", "856"],
           ["Latvia", "lv", "371"],
           ["Lebanon", "lb", "961"],
           ["Lesotho", "ls", "266"],
           ["Liberia", "lr", "231"],
           ["Libya", "ly", "218"],
           ["Liechtenstein", "li", "423"],
           ["Lithuania", "lt", "370"],
           ["Luxembourg", "lu", "352"],
           ["Macau", "mo", "853"],
           ["Madagascar", "mg", "261"],
           ["Malawi", "mw", "265"],
           ["Malaysia", "my", "60"],
           ["Maldives", "mv", "960"],
           ["Mali", "ml", "223"],
           ["Malta", "mt", "356"],
           ["Marshall Islands", "mh", "692"],
           ["Martinique", "mq", "596"],
           ["Mauritania", "mr", "222"],
           ["Mauritius", "mu", "230"],
           ["Mayotte", "yt", "262", 1, ["269", "639"]],
           ["Mexico", "mx", "52"],
           ["Micronesia", "fm", "691"],
           ["Moldova", "md", "373"],
           ["Monaco", "mc", "377"],
           ["Mongolia", "mn", "976"],
           ["Montenegro", "me", "382"],
           ["Montserrat", "ms", "1", 16, ["664"]],
           ["Morocco", "ma", "212", 0],
           ["Mozambique", "mz", "258"],
           ["Myanmar (Burma)", "mm", "95"],
           ["Namibia", "na", "264"],
           ["Nauru", "nr", "674"],
           ["Nepal", "np", "977"],
           ["Netherlands", "nl", "31"],
           ["New Caledonia", "nc", "687"],
           ["New Zealand", "nz", "64"],
           ["Nicaragua", "ni", "505"],
           ["Niger", "ne", "227"],
           ["Nigeria", "ng", "234"],
           ["Niue", "nu", "683"],
           ["Norfolk Island", "nf", "672"],
           ["North Korea", "kp", "850"],
           ["North Macedonia", "mk", "389"],
           ["Northern Mariana Islands", "mp", "1", 17, ["670"]],
           ["Norway", "no", "47", 0],
           ["Oman", "om", "968"],
           ["Pakistan", "pk", "92"],
           ["Palau", "pw", "680"],
           ["Palestine", "ps", "970"],
           ["Panama", "pa", "507"],
           ["Papua New Guinea", "pg", "675"],
           ["Paraguay", "py", "595"],
           ["Peru", "pe", "51"],
           ["Philippines", "ph", "63"],
           ["Poland", "pl", "48"],
           ["Portugal", "pt", "351"],
           ["Puerto Rico", "pr", "1", 3, ["787", "939"]],
           ["Qatar", "qa", "974"],
           ["R\xe9union", "re", "262", 0],
           ["Romania", "ro", "40"],
           ["Russia", "ru", "7", 0],
           ["Rwanda", "rw", "250"],
           ["Samoa", "ws", "685"],
           ["San Marino", "sm", "378"],
           ["S\xe3o Tom\xe9 & Pr\xedncipe", "st", "239"],
           ["Saudi Arabia", "sa", "966"],
           ["Senegal", "sn", "221"],
           ["Serbia", "rs", "381"],
           ["Seychelles", "sc", "248"],
           ["Sierra Leone", "sl", "232"],
           ["Singapore", "sg", "65"],
           ["Sint Maarten", "sx", "1", 21, ["721"]],
           ["Slovakia", "sk", "421"],
           ["Slovenia", "si", "386"],
           ["Solomon Islands", "sb", "677"],
           ["Somalia", "so", "252"],
           ["South Africa", "za", "27"],
           ["South Korea", "kr", "82"],
           ["South Sudan", "ss", "211"],
           ["Spain", "es", "34"],
           ["Sri Lanka", "lk", "94"],
           ["St Barth\xe9lemy", "bl", "590", 1],
           ["St Helena", "sh", "290"],
           ["St Kitts & Nevis", "kn", "1", 18, ["869"]],
           ["St Lucia", "lc", "1", 19, ["758"]],
           ["St Martin", "mf", "590", 2],
           ["St Pierre & Miquelon", "pm", "508"],
           ["St Vincent & Grenadines", "vc", "1", 20, ["784"]],
           ["Sudan", "sd", "249"],
           ["Suriname", "sr", "597"],
           ["Svalbard & Jan Mayen", "sj", "47", 1, ["79"]],
           ["Sweden", "se", "46"],
           ["Switzerland", "ch", "41"],
           ["Syria", "sy", "963"],
           ["Taiwan", "tw", "886"],
           ["Tajikistan", "tj", "992"],
           ["Tanzania", "tz", "255"],
           ["Thailand", "th", "66"],
           ["Timor-Leste", "tl", "670"],
           ["Togo", "tg", "228"],
           ["Tokelau", "tk", "690"],
           ["Tonga", "to", "676"],
           ["Trinidad & Tobago", "tt", "1", 22, ["868"]],
           ["Tunisia", "tn", "216"],
           ["Turkey", "tr", "90"],
           ["Turkmenistan", "tm", "993"],
           ["Turks & Caicos Islands", "tc", "1", 23, ["649"]],
           ["Tuvalu", "tv", "688"],
           ["Uganda", "ug", "256"],
           ["Ukraine", "ua", "380"],
           ["United Arab Emirates", "ae", "971"],
           ["United Kingdom", "gb", "44", 0],
           ["United States", "us", "1", 0],
           ["Uruguay", "uy", "598"],
           ["US Virgin Islands", "vi", "1", 24, ["340"]],
           ["Uzbekistan", "uz", "998"],
           ["Vanuatu", "vu", "678"],
           ["Vatican City", "va", "39", 1, ["06698"]],
           ["Venezuela", "ve", "58"],
           ["Vietnam", "vn", "84"],
           ["Wallis & Futuna", "wf", "681"],
           ["Western Sahara", "eh", "212", 1, ["5288", "5289"]],
           ["Yemen", "ye", "967"],
           ["Zambia", "zm", "260"],
           ["Zimbabwe", "zw", "263"],
           ["\xc5land Islands", "ax", "358", 1, ["18"]]
        ],
        h = [];
     for (let d = 0; d < r.length; d++) {
        let u = r[d];
        h[d] = {
           name: u[0],
           iso2: u[1],
           dialCode: u[2],
           priority: u[3] || 0,
           areaCodes: u[4] || null,
           nodeById: {}
        }
     }
     var c = h,
        p = 0,
        y = {
           allowDropdown: !0,
           autoPlaceholder: "polite",
           countrySearch: !0,
           containerClass: "",
           customPlaceholder: null,
           dropdownContainer: null,
           excludeCountries: [],
           fixDropdownWidth: !0,
           formatAsYouType: !0,
           formatOnDisplay: !0,
           geoIpLookup: null,
           hiddenInput: null,
           i18n: {},
           initialCountry: "",
           nationalMode: !0,
           onlyCountries: [],
           placeholderNumberType: "MOBILE",
           preferredCountries: [],
           showFlags: !0,
           showSelectedDialCode: !1,
           strictMode: !1,
           useFullscreenPopup: !!("u" > typeof navigator && "u" > typeof window) && (/Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 500),
           utilsScript: ""
        },
        m = ["800", "822", "833", "844", "855", "866", "877", "880", "881", "882", "883", "884", "885", "886", "887", "888", "889"],
        g = t => t.replace(/\D/g, ""),
        b = (t = "") => t.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase(),
        C = (t, e, i) => {
           i && !t.classList.contains(e) ? t.classList.add(e) : !i && t.classList.contains(e) && t.classList.remove(e)
        },
        _ = t => {
           let e = g(t);
           if ("1" === e.charAt(0)) {
              let i = e.substr(1, 3);
              return -1 !== m.indexOf(i)
           }
           return !1
        },
        f = (t, e) => t.name < e.name ? -1 : t.name > e.name ? 1 : 0,
        $ = (t, e, i, s) => {
           if (0 === i && !s) return 0;
           let n = 0;
           for (let a = 0; a < e.length; a++) {
              if (/[+0-9]/.test(e[a]) && n++, n === t && !s) return a + 1;
              if (s && n === t + 1) return a
           }
           return e.length
        },
        w = (t, e, i) => {
           let s = document.createElement(t);
           return e && Object.entries(e).forEach(([t, e]) => s.setAttribute(t, e)), i && i.appendChild(s), s
        },
        v = t => {
           let {
              instances: e
           } = window.intlTelInputGlobals;
           Object.values(e).forEach(e => e[t]())
        },
        L = class {
           id;
           promise;
           telInput;
           activeItem;
           highlightedItem;
           options;
           hadInitialPlaceholder;
           isRTL;
           selectedCountryData;
           countries;
           dialCodeMaxLen;
           dialCodeToIso2Map;
           dialCodes;
           preferredCountries;
           countryContainer;
           selectedCountry;
           selectedCountryInner;
           selectedCountryA11yText;
           selectedDialCode;
           dropdownArrow;
           dropdownContent;
           searchInput;
           searchResultsA11yText;
           countryList;
           dropdown;
           hiddenInput;
           hiddenInputCountry;
           maxCoreNumberLength;
           defaultCountry;
           _a14;
           _a9;
           _a10;
           _a11;
           _a12;
           _handleKeydownEvent;
           _a4;
           _a0;
           _a1;
           _a2;
           _a3;
           _a7;
           resolveAutoCountryPromise;
           rejectAutoCountryPromise;
           resolveUtilsScriptPromise;
           rejectUtilsScriptPromise;
           constructor(t, e = {}) {
              this.id = p++, this.a = t, this.b = null, this.c = null, this.d = Object.assign({}, y, e), this.e = !!t.getAttribute("placeholder")
           }
           _init() {
              this.d.useFullscreenPopup && (this.d.fixDropdownWidth = !1), this.d.countrySearch && !this.d.useFullscreenPopup && (this.d.fixDropdownWidth = !0);
              let t = this.d.allowDropdown && !this.d.showSelectedDialCode;
              !this.d.showFlags && t && (this.d.showFlags = !0), this.d.useFullscreenPopup && !this.d.dropdownContainer && (this.d.dropdownContainer = document.body), this.isRTL = !!this.a.closest("[dir=rtl]");
              let e = new Promise((t, e) => {
                    this.h = t, this.i = e
                 }),
                 i = new Promise((t, e) => {
                    this.i0 = t, this.i1 = e
                 });
              this.promise = Promise.all([e, i]), this.s = {}, this._b(), this._f(), this._h(), this._i(), this._i3()
           }
           _b() {
              this._d(), this._d2(), this._e(), this._d0(), (this.d.onlyCountries.length || this.d.i18n) && this.p.sort(f)
           }
           _c(t, e, i) {
              e.length > this.dialCodeMaxLen && (this.dialCodeMaxLen = e.length), this.q.hasOwnProperty(e) || (this.q[e] = []);
              for (let s = 0; s < this.q[e].length; s++)
                 if (this.q[e][s] === t) return;
              let n = void 0 !== i ? i : this.q[e].length;
              this.q[e][n] = t
           }
           _d() {
              let {
                 onlyCountries: t,
                 excludeCountries: e
              } = this.d;
              if (t.length) {
                 let i = t.map(t => t.toLowerCase());
                 this.p = c.filter(t => i.indexOf(t.iso2) > -1)
              } else if (e.length) {
                 let s = e.map(t => t.toLowerCase());
                 this.p = c.filter(t => -1 === s.indexOf(t.iso2))
              } else this.p = c
           }
           _d0() {
              for (let t = 0; t < this.p.length; t++) {
                 let e = this.p[t].iso2.toLowerCase();
                 this.d.i18n.hasOwnProperty(e) && (this.p[t].name = this.d.i18n[e])
              }
           }
           _d2() {
              this.dialCodes = {}, this.dialCodeMaxLen = 0, this.q = {};
              for (let t = 0; t < this.p.length; t++) {
                 let e = this.p[t];
                 this.dialCodes[e.dialCode] || (this.dialCodes[e.dialCode] = !0), this._c(e.iso2, e.dialCode, e.priority)
              }
              for (let i = 0; i < this.p.length; i++) {
                 let s = this.p[i];
                 if (s.areaCodes) {
                    let n = this.q[s.dialCode][0];
                    for (let a = 0; a < s.areaCodes.length; a++) {
                       let l = s.areaCodes[a];
                       for (let o = 1; o < l.length; o++) {
                          let r = s.dialCode + l.substr(0, o);
                          this._c(n, r), this._c(s.iso2, r)
                       }
                       this._c(s.iso2, s.dialCode + l)
                    }
                 }
              }
           }
           _e() {
              this.preferredCountries = [];
              for (let t = 0; t < this.d.preferredCountries.length; t++) {
                 let e = this.d.preferredCountries[t].toLowerCase(),
                    i = this._y(e, !0);
                 i && this.preferredCountries.push(i)
              }
           }
           _f() {
              this.a.classList.add("iti__tel-input"), this.a.hasAttribute("autocomplete") || this.a.form && this.a.form.hasAttribute("autocomplete") || this.a.setAttribute("autocomplete", "off");
              let {
                 allowDropdown: t,
                 showSelectedDialCode: e,
                 showFlags: i,
                 containerClass: s,
                 hiddenInput: n,
                 dropdownContainer: a,
                 fixDropdownWidth: l,
                 useFullscreenPopup: o,
                 countrySearch: r,
                 i18n: h
              } = this.d, d = "iti";
              t && (d += " iti--allow-dropdown"), e && (d += " iti--show-selected-dial-code"), i && (d += " iti--show-flags"), s && (d += ` ${s}`), o || (d += " iti--inline-dropdown");
              let u = w("div", {
                 class: d
              });
              if (this.a.parentNode?.insertBefore(u, this.a), (i || e) && (this.k = w("div", {
                    class: "iti__country-container"
                 }, u), this.selectedCountry = w("button", {
                    type: "button",
                    class: "iti__selected-country",
                    ...t && {
                       "aria-expanded": "false",
                       "aria-label": this.d.i18n.selectedCountryAriaLabel || "Selected country",
                       "aria-haspopup": r ? "true" : "listbox",
                       "aria-controls": r ? `iti-${this.id}__dropdown-content` : `iti-${this.id}__country-listbox`,
                       ...r ? {
                          role: "combobox"
                       } : {}
                    }
                 }, this.k), this.l = w("div", null, this.selectedCountry), this.selectedCountryA11yText = w("span", {
                    class: "iti__a11y-text"
                 }, this.l)), u.appendChild(this.a), this.selectedCountry && this.a.disabled && this.selectedCountry.setAttribute("aria-disabled", "true"), e && (this.t = w("div", {
                    class: "iti__selected-dial-code"
                 }, this.selectedCountry)), t) {
                 if (this.a.disabled || this.selectedCountry.setAttribute("tabindex", "0"), this.u = w("div", {
                       class: "iti__arrow",
                       "aria-hidden": "true"
                    }, this.selectedCountry), this.dropdownContent = w("div", {
                       id: `iti-${this.id}__dropdown-content`,
                       class: `iti__dropdown-content iti__hide ${l?"":"iti--flexible-dropdown-width"}`
                    }), r && (this.searchInput = w("input", {
                       type: "text",
                       class: "iti__search-input",
                       placeholder: h.searchPlaceholder || "Search",
                       role: "combobox",
                       "aria-expanded": "true",
                       "aria-label": h.searchPlaceholder || "Search",
                       "aria-controls": `iti-${this.id}__country-listbox`,
                       "aria-autocomplete": "list",
                       autocomplete: "off"
                    }, this.dropdownContent), this.searchResultsA11yText = w("span", {
                       class: "iti__a11y-text"
                    }, this.dropdownContent)), this.countryList = w("ul", {
                       class: "iti__country-list",
                       id: `iti-${this.id}__country-listbox`,
                       role: "listbox",
                       "aria-label": h.countryListAriaLabel || "List of countries"
                    }, this.dropdownContent), this.preferredCountries.length && !r && (this._g(this.preferredCountries, "iti__preferred", !0), w("li", {
                       class: "iti__divider",
                       "aria-hidden": "true"
                    }, this.countryList)), this._g(this.p, "iti__standard"), r && this._p4(), a) {
                    let c = "iti iti--container";
                    o ? c += " iti--fullscreen-popup" : c += " iti--inline-dropdown", r && (c += " iti--country-search"), this.dropdown = w("div", {
                       class: c
                    }), this.dropdown.appendChild(this.dropdownContent)
                 } else this.k.appendChild(this.dropdownContent)
              }
              if (n) {
                 let p = n(this.a.getAttribute("name") || "");
                 p.phone && (this.hiddenInput = w("input", {
                    type: "hidden",
                    name: p.phone
                 }), u.appendChild(this.hiddenInput)), p.country && (this.hiddenInputCountry = w("input", {
                    type: "hidden",
                    name: p.country
                 }), u.appendChild(this.hiddenInputCountry))
              }
           }
           _g(t, e, i) {
              for (let s = 0; s < t.length; s++) {
                 let n = t[s],
                    a = w("li", {
                       id: `iti-${this.id}__item-${n.iso2}${i?"-preferred":""}`,
                       class: `iti__country ${e}`,
                       tabindex: "-1",
                       role: "option",
                       "data-dial-code": n.dialCode,
                       "data-country-code": n.iso2,
                       "aria-selected": "false"
                    }, this.countryList);
                 n.nodeById[this.id] = a;
                 let l = "";
                 this.d.showFlags && (l += `<div class='iti__flag-box'><div class='iti__flag iti__${n.iso2}'></div></div>`), l += `<span class='iti__country-name'>${n.name}</span>`, l += `<span class='iti__dial-code'>+${n.dialCode}</span>`, a.insertAdjacentHTML("beforeend", l)
              }
           }
           _h(t = !1) {
              let e = this.a.getAttribute("value"),
                 i = this.a.value,
                 s = e && "+" === e.charAt(0) && (!i || "+" !== i.charAt(0)) ? e : i,
                 n = this._5(s),
                 a = _(s),
                 {
                    initialCountry: l
                 } = this.d;
              if (n && !a) this._v(s);
              else if ("auto" !== l || t) {
                 let o = l ? l.toLowerCase() : "";
                 o && this._y(o, !0) ? this._z(o) : n && a ? this._z("us") : this._z()
              }
              s && this._u(s)
           }
           _i() {
              this._j(), this.d.allowDropdown && this._i2(), (this.hiddenInput || this.hiddenInputCountry) && this.a.form && this._i0()
           }
           _i0() {
              this._a14 = () => {
                 this.hiddenInput && (this.hiddenInput.value = this.getNumber()), this.hiddenInputCountry && (this.hiddenInputCountry.value = this.getSelectedCountryData().iso2 || "")
              }, this.a.form?.addEventListener("submit", this._a14)
           }
           _i2() {
              this._a9 = t => {
                 this.dropdownContent.classList.contains("iti__hide") ? this.a.focus() : t.preventDefault()
              };
              let t = this.a.closest("label");
              t && t.addEventListener("click", this._a9), this._a10 = () => {
                 !this.dropdownContent.classList.contains("iti__hide") || this.a.disabled || this.a.readOnly || this._n()
              }, this.selectedCountry.addEventListener("click", this._a10), this._a11 = t => {
                 this.dropdownContent.classList.contains("iti__hide") && ["ArrowUp", "ArrowDown", " ", "Enter"].includes(t.key) && (t.preventDefault(), t.stopPropagation(), this._n()), "Tab" === t.key && this._2()
              }, this.k.addEventListener("keydown", this._a11)
           }
           _i3() {
              this.d.utilsScript && !window.intlTelInputUtils ? window.intlTelInputGlobals.documentReady() ? window.intlTelInputGlobals.loadUtils(this.d.utilsScript) : window.addEventListener("load", () => {
                 window.intlTelInputGlobals.loadUtils(this.d.utilsScript)
              }) : this.i0(), "auto" !== this.d.initialCountry || this.s.iso2 ? this.h() : this._i4()
           }
           _i4() {
              window.intlTelInputGlobals.autoCountry ? this.handleAutoCountry() : window.intlTelInputGlobals.startedLoadingAutoCountry || (window.intlTelInputGlobals.startedLoadingAutoCountry = !0, "function" == typeof this.d.geoIpLookup && this.d.geoIpLookup((t = "") => {
                 let e = t.toLowerCase();
                 e && this._y(e, !0) ? (window.intlTelInputGlobals.autoCountry = e, setTimeout(() => v("handleAutoCountry"))) : (this._h(!0), v("rejectAutoCountryPromise"))
              }, () => {
                 this._h(!0), v("rejectAutoCountryPromise")
              }))
           }
           _j() {
              let {
                 strictMode: t,
                 formatAsYouType: e
              } = this.d, i = !1;
              this._a12 = s => {
                 this._v(this.a.value) && this._8();
                 let n = s && s.data && /[^+0-9]/.test(s.data),
                    a = s && "insertFromPaste" === s.inputType && this.a.value;
                 if (n || a && !t ? i = !0 : /[^+0-9]/.test(this.a.value) || (i = !1), e && !i) {
                    let l = this.a.selectionStart || 0,
                       o = this.a.value.substring(0, l).replace(/[^+0-9]/g, "").length,
                       r = s && "deleteContentForward" === s.inputType,
                       h = this._9(),
                       d = $(o, h, l, r);
                    this.a.value = h, this.a.setSelectionRange(d, d)
                 }
              }, this.a.addEventListener("input", this._a12), t && (this._handleKeydownEvent = t => {
                 if (1 === t.key.length && !t.altKey && !t.ctrlKey && !t.metaKey) {
                    let e = 0 === this.a.selectionStart && "+" === t.key,
                       i = /^[0-9]$/.test(t.key),
                       s = this._6(),
                       n = window.intlTelInputUtils.getCoreNumber(s, this.s.iso2),
                       a = this.maxCoreNumberLength && n.length >= this.maxCoreNumberLength;
                    (!(e || i) || a) && t.preventDefault()
                 }
              }, this.a.addEventListener("keydown", this._handleKeydownEvent))
           }
           _j2(t) {
              let e = parseInt(this.a.getAttribute("maxlength") || "", 10);
              return e && t.length > e ? t.substr(0, e) : t
           }
           _trigger(t) {
              let e = new Event(t, {
                 bubbles: !0,
                 cancelable: !0
              });
              this.a.dispatchEvent(e)
           }
           _n() {
              let {
                 fixDropdownWidth: t,
                 countrySearch: e
              } = this.d;
              if (t && (this.dropdownContent.style.width = `${this.a.offsetWidth}px`), this.dropdownContent.classList.remove("iti__hide"), this.selectedCountry.setAttribute("aria-expanded", "true"), this._o(), this.b && !e) this._x(this.b, !1), this._3(this.b, !0);
              else {
                 let i = this.countryList.firstElementChild;
                 i && (this._x(i, !1), this.countryList.scrollTop = 0), e && this.searchInput.focus()
              }
              this._p(), this.u.classList.add("iti__arrow--up"), this._trigger("open:countrydropdown")
           }
           _o() {
              if (this.d.dropdownContainer && this.d.dropdownContainer.appendChild(this.dropdown), !this.d.useFullscreenPopup) {
                 let t = this.a.getBoundingClientRect(),
                    e = document.documentElement.scrollTop,
                    i = t.top + e,
                    s = this.dropdownContent.offsetHeight,
                    n = i + this.a.offsetHeight + s < e + window.innerHeight,
                    a = !this.d.countrySearch && !n && i - s > e;
                 if (C(this.dropdownContent, "iti__dropdown-content--dropup", a), this.d.dropdownContainer) {
                    let l = a ? 0 : this.a.offsetHeight;
                    this.dropdown.style.top = `${i+l}px`, this.dropdown.style.left = `${t.left+document.body.scrollLeft}px`, this._a4 = () => this._2(), window.addEventListener("scroll", this._a4)
                 }
              }
           }
           _p() {
              this._a0 = t => {
                 let e = t.target?.closest(".iti__country");
                 e && this._x(e, !1)
              }, this.countryList.addEventListener("mouseover", this._a0), this._a1 = t => {
                 let e = t.target?.closest(".iti__country");
                 e && this._1(e)
              }, this.countryList.addEventListener("click", this._a1);
              let t = !0;
              this._a2 = () => {
                 t || this._2(), t = !1
              }, document.documentElement.addEventListener("click", this._a2);
              let e = "",
                 i = null;
              if (this._a3 = t => {
                    ["ArrowUp", "ArrowDown", "Enter", "Escape"].includes(t.key) && (t.preventDefault(), t.stopPropagation(), "ArrowUp" === t.key || "ArrowDown" === t.key ? this._q(t.key) : "Enter" === t.key ? this._r() : "Escape" === t.key && this._2()), !this.d.countrySearch && /^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(t.key) && (t.stopPropagation(), i && clearTimeout(i), e += t.key.toLowerCase(), this._s(e), i = setTimeout(() => {
                       e = ""
                    }, 1e3))
                 }, document.addEventListener("keydown", this._a3), this.d.countrySearch) {
                 let s = () => {
                       let t = this.searchInput.value.trim();
                       t ? this._p3(t) : this._p3("", !0)
                    },
                    n = null;
                 this._a7 = () => {
                    n && clearTimeout(n), n = setTimeout(() => {
                       s(), n = null
                    }, 100)
                 }, this.searchInput.addEventListener("input", this._a7), this.searchInput.addEventListener("click", t => t.stopPropagation())
              }
           }
           _p3(t, e = !1) {
              let i = !0;
              this.countryList.innerHTML = "";
              let s = b(t);
              for (let n = 0; n < this.p.length; n++) {
                 let a = this.p[n],
                    l = b(a.name),
                    o = `+${a.dialCode}`;
                 if (e || l.includes(s) || o.includes(s) || a.iso2.includes(s)) {
                    let r = a.nodeById[this.id];
                    r && this.countryList.appendChild(r), i && (this._x(r, !1), i = !1)
                 }
              }
              this.countryList.scrollTop = 0, this._p4()
           }
           _p4() {
              let {
                 i18n: t
              } = this.d, e = this.countryList.childElementCount, i;
              i = 0 === e ? t.zeroSearchResults || "No results found" : 1 === e ? t.oneSearchResult || "1 result found" : t.multipleSearchResults ? t.multipleSearchResults.replace("${count}", e.toString()) : `${e} results found`, this.searchResultsA11yText.textContent = i
           }
           _q(t) {
              let e = "ArrowUp" === t ? this.c?.previousElementSibling : this.c?.nextElementSibling;
              if (e ? e.classList.contains("iti__divider") && (e = "ArrowUp" === t ? e.previousElementSibling : e.nextElementSibling) : this.countryList.childElementCount > 1 && (e = "ArrowUp" === t ? this.countryList.lastElementChild : this.countryList.firstElementChild), e) {
                 this._3(e, !1);
                 let i = !this.d.countrySearch;
                 this._x(e, i)
              }
           }
           _r() {
              this.c && this._1(this.c)
           }
           _s(t) {
              for (let e = 0; e < this.p.length; e++) {
                 let i = this.p[e];
                 if (i.name.substr(0, t.length).toLowerCase() === t) {
                    let s = i.nodeById[this.id];
                    this._x(s, !1), this._3(s, !0);
                    break
                 }
              }
           }
           _u(t) {
              let e = t;
              if (this.d.formatOnDisplay && window.intlTelInputUtils && this.s) {
                 let i = this.d.nationalMode || "+" !== e.charAt(0) && !this.d.showSelectedDialCode,
                    {
                       NATIONAL: s,
                       INTERNATIONAL: n
                    } = window.intlTelInputUtils.numberFormat;
                 e = window.intlTelInputUtils.formatNumber(e, this.s.iso2, i ? s : n)
              }
              e = this._7(e), this.a.value = e
           }
           _v(t) {
              let e = t.indexOf("+"),
                 i = e ? t.substring(e) : t,
                 s = this.s.dialCode;
              i && "1" === s && "+" !== i.charAt(0) && ("1" !== i.charAt(0) && (i = `1${i}`), i = `+${i}`), this.d.showSelectedDialCode && s && "+" !== i.charAt(0) && (i = `+${s}${i}`);
              let n = this._5(i, !0),
                 a = g(i),
                 l = null;
              if (n) {
                 let o = this.q[g(n)],
                    r = -1 !== o.indexOf(this.s.iso2) && a.length <= n.length - 1;
                 if (!("1" === s && _(a)) && !r) {
                    for (let h = 0; h < o.length; h++)
                       if (o[h]) {
                          l = o[h];
                          break
                       }
                 }
              } else "+" === i.charAt(0) && a.length ? l = "" : i && "+" !== i || this.s.iso2 || (l = this.j);
              return null !== l && this._z(l)
           }
           _x(t, e) {
              let i = this.c;
              i && (i.classList.remove("iti__highlight"), i.setAttribute("aria-selected", "false")), this.c = t, this.c.classList.add("iti__highlight"), this.c.setAttribute("aria-selected", "true"), this.selectedCountry.setAttribute("aria-activedescendant", t.getAttribute("id") || ""), this.d.countrySearch && this.searchInput.setAttribute("aria-activedescendant", t.getAttribute("id") || ""), e && this.c.focus()
           }
           _y(t, e) {
              for (let i = 0; i < this.p.length; i++)
                 if (this.p[i].iso2 === t) return this.p[i];
              if (e) return null;
              throw Error(`No country data for '${t}'`)
           }
           _z(t) {
              let {
                 allowDropdown: e,
                 showSelectedDialCode: i,
                 showFlags: s,
                 countrySearch: n,
                 i18n: a
              } = this.d, l = this.s.iso2 ? this.s : {};
              if (this.s = t && this._y(t, !1) || {}, this.s.iso2 && (this.j = this.s.iso2), this.l) {
                 let o = "",
                    r = "";
                 t ? s && (o = `iti__flag iti__${t}`, r = `${this.s.name} +${this.s.dialCode}`) : (o = "iti__flag iti__in", r = a.noCountrySelected || "No country selected"), this.l.className = o, this.selectedCountryA11yText.textContent = r
              }
              if (this._z3(t, i), i) {
                 let h = this.s.dialCode ? `+${this.s.dialCode}` : "";
                 this.t.innerHTML = h;
                 let d = this.selectedCountry.offsetWidth || this._z2();
                 this.isRTL ? this.a.style.paddingRight = `${d+6}px` : this.a.style.paddingLeft = `${d+6}px`
              }
              if (this._0(), this._updateMaxLength(), e && !n) {
                 let u = this.b;
                 if (u && (u.classList.remove("iti__active"), u.setAttribute("aria-selected", "false")), t) {
                    let c = this.countryList.querySelector(`#iti-${this.id}__item-${t}-preferred`) || this.countryList.querySelector(`#iti-${this.id}__item-${t}`);
                    c && (c.setAttribute("aria-selected", "true"), c.classList.add("iti__active"), this.b = c)
                 }
              }
              return l.iso2 !== t
           }
           _updateMaxLength() {
              if (this.d.strictMode && window.intlTelInputUtils) {
                 if (this.s.iso2) {
                    let t = window.intlTelInputUtils.numberType[this.d.placeholderNumberType],
                       e = window.intlTelInputUtils.getExampleNumber(this.s.iso2, !1, t, !0),
                       i = e;
                    for (; window.intlTelInputUtils.isPossibleNumber(e, this.s.iso2);) i = e, e += "0";
                    let s = window.intlTelInputUtils.getCoreNumber(i, this.s.iso2);
                    this.maxCoreNumberLength = s.length
                 } else this.maxCoreNumberLength = null
              }
           }
           _z3(t = null, e) {
              if (!this.selectedCountry) return;
              let i;
              i = t && !e ? `${this.s.name}: +${this.s.dialCode}` : t ? this.s.name : "Unknown", this.selectedCountry.setAttribute("title", i)
           }
           _z2() {
              if (this.a.parentNode) {
                 let t = this.a.parentNode.cloneNode(!1);
                 t.style.visibility = "hidden", document.body.appendChild(t);
                 let e = this.k.cloneNode();
                 t.appendChild(e);
                 let i = this.selectedCountry.cloneNode(!0);
                 e.appendChild(i);
                 let s = i.offsetWidth;
                 return document.body.removeChild(t), s
              }
              return 0
           }
           _0() {
              let {
                 autoPlaceholder: t,
                 placeholderNumberType: e,
                 nationalMode: i,
                 customPlaceholder: s
              } = this.d, n = "aggressive" === t || !this.e && "polite" === t;
              if (window.intlTelInputUtils && n) {
                 let a = window.intlTelInputUtils.numberType[e],
                    l = this.s.iso2 ? window.intlTelInputUtils.getExampleNumber(this.s.iso2, i, a) : "";
                 l = this._7(l), "function" == typeof s && (l = s(l, this.s)), this.a.setAttribute("placeholder", l)
              }
           }
           _1(t) {
              let e = this._z(t.getAttribute("data-country-code"));
              this._2(), this._4(t.getAttribute("data-dial-code")), this.a.focus(), e && this._8()
           }
           _2() {
              this.dropdownContent.classList.add("iti__hide"), this.selectedCountry.setAttribute("aria-expanded", "false"), this.selectedCountry.removeAttribute("aria-activedescendant"), this.c && this.c.setAttribute("aria-selected", "false"), this.d.countrySearch && this.searchInput.removeAttribute("aria-activedescendant"), this.u.classList.remove("iti__arrow--up"), document.removeEventListener("keydown", this._a3), this.d.countrySearch && this.searchInput.removeEventListener("input", this._a7), document.documentElement.removeEventListener("click", this._a2), this.countryList.removeEventListener("mouseover", this._a0), this.countryList.removeEventListener("click", this._a1), this.d.dropdownContainer && (this.d.useFullscreenPopup || window.removeEventListener("scroll", this._a4), this.dropdown.parentNode && this.dropdown.parentNode.removeChild(this.dropdown)), this._trigger("close:countrydropdown")
           }
           _3(t, e) {
              let i = this.countryList,
                 s = document.documentElement.scrollTop,
                 n = i.offsetHeight,
                 a = i.getBoundingClientRect().top + s,
                 l = t.offsetHeight,
                 o = t.getBoundingClientRect().top + s,
                 r = o - a + i.scrollTop,
                 h = n / 2 - l / 2;
              o < a ? (e && (r -= h), i.scrollTop = r) : o + l > a + n && (e && (r += h), i.scrollTop = r - (n - l))
           }
           _4(t) {
              let e = this.a.value,
                 i = `+${t}`,
                 s;
              if ("+" === e.charAt(0)) {
                 let n = this._5(e);
                 s = n ? e.replace(n, i) : i, this.a.value = s
              }
           }
           _5(t, e) {
              let i = "";
              if ("+" === t.charAt(0)) {
                 let s = "";
                 for (let n = 0; n < t.length; n++) {
                    let a = t.charAt(n);
                    if (!isNaN(parseInt(a, 10))) {
                       if (s += a, e) this.q[s] && (i = t.substr(0, n + 1));
                       else if (this.dialCodes[s]) {
                          i = t.substr(0, n + 1);
                          break
                       }
                       if (s.length === this.dialCodeMaxLen) break
                    }
                 }
              }
              return i
           }
           _6() {
              let t = this.a.value.trim(),
                 {
                    dialCode: e
                 } = this.s,
                 i, s = g(t);
              return (i = this.d.showSelectedDialCode && !this.d.nationalMode && "+" !== t.charAt(0) && e && s ? `+${e}` : "") + t
           }
           _7(t) {
              let e = t;
              if (this.d.showSelectedDialCode) {
                 let i = this._5(e);
                 if (i) {
                    let s = " " === e[(i = `+${this.s.dialCode}`).length] || "-" === e[i.length] ? i.length + 1 : i.length;
                    e = e.substr(s)
                 }
              }
              return this._j2(e)
           }
           _8() {
              this._trigger("countrychange")
           }
           _9() {
              let t = this._6(),
                 e = window.intlTelInputUtils ? window.intlTelInputUtils.formatNumberAsYouType(t, this.s.iso2) : t,
                 {
                    dialCode: i
                 } = this.s;
              return this.d.showSelectedDialCode && !this.d.nationalMode && "+" !== this.a.value.charAt(0) && e.includes(`+${i}`) ? (e.split(`+${i}`)[1] || "").trim() : e
           }
           handleAutoCountry() {
              "auto" === this.d.initialCountry && window.intlTelInputGlobals.autoCountry && (this.j = window.intlTelInputGlobals.autoCountry, this.a.value || this.setCountry(this.j), this.h())
           }
           handleUtils() {
              window.intlTelInputUtils && (this.a.value && this._u(this.a.value), this.s.iso2 && (this._0(), this._updateMaxLength())), this.i0()
           }
           destroy() {
              if (this.d.allowDropdown) {
                 this._2(), this.selectedCountry.removeEventListener("click", this._a10), this.k.removeEventListener("keydown", this._a11);
                 let t = this.a.closest("label");
                 t && t.removeEventListener("click", this._a9)
              }
              let {
                 form: e
              } = this.a;
              this._a14 && e && e.removeEventListener("submit", this._a14), this.a.removeEventListener("input", this._a12), this._handleKeydownEvent && this.a.removeEventListener("keydown", this._handleKeydownEvent), this.a.removeAttribute("data-intl-tel-input-id");
              let i = this.a.parentNode;
              i?.parentNode?.insertBefore(this.a, i), i?.parentNode?.removeChild(i), delete window.intlTelInputGlobals.instances[this.id]
           }
           getExtension() {
              return window.intlTelInputUtils ? window.intlTelInputUtils.getExtension(this._6(), this.s.iso2) : ""
           }
           getNumber(t) {
              if (window.intlTelInputUtils) {
                 let {
                    iso2: e
                 } = this.s;
                 return window.intlTelInputUtils.formatNumber(this._6(), e, t)
              }
              return ""
           }
           getNumberType() {
              return window.intlTelInputUtils ? window.intlTelInputUtils.getNumberType(this._6(), this.s.iso2) : -99
           }
           getSelectedCountryData() {
              return this.s
           }
           getValidationError() {
              if (window.intlTelInputUtils) {
                 let {
                    iso2: t
                 } = this.s;
                 return window.intlTelInputUtils.getValidationError(this._6(), t)
              }
              return -99
           }
           isValidNumber(t = !0) {
              let e = this._6();
              return !/\p{L}/u.test(e) && (window.intlTelInputUtils ? window.intlTelInputUtils.isPossibleNumber(e, this.s.iso2, t) : null)
           }
           isValidNumberPrecise() {
              let t = this._6();
              return !/\p{L}/u.test(t) && (window.intlTelInputUtils ? window.intlTelInputUtils.isValidNumber(t, this.s.iso2) : null)
           }
           setCountry(t) {
              let e = t.toLowerCase();
              this.s.iso2 !== e && (this._z(e), this._4(this.s.dialCode), this._8())
           }
           setNumber(t) {
              let e = this._v(t);
              this._u(t), e && this._8()
           }
           setPlaceholderNumberType(t) {
              this.d.placeholderNumberType = t, this._0()
           }
        },
        I = (t, e, i) => {
           let s = document.createElement("script");
           s.onload = () => {
              v("handleUtils"), e && e()
           }, s.onerror = () => {
              v("rejectUtilsScriptPromise"), i && i()
           }, s.className = "iti-load-utils", s.async = !0, s.src = t, document.body.appendChild(s)
        },
        A = t => window.intlTelInputUtils || window.intlTelInputGlobals.startedLoadingUtilsScript ? null : (window.intlTelInputGlobals.startedLoadingUtilsScript = !0, new Promise((e, i) => I(t, e, i)));
     if ("object" == typeof window) {
        let T = {
           defaults: y,
           documentReady: () => "complete" === document.readyState,
           getCountryData: () => c,
           getInstance(t) {
              let e = t.getAttribute("data-intl-tel-input-id");
              return e ? T.instances[e] : null
           },
           instances: {},
           loadUtils: A,
           version: "21.0.8"
        };
        window.intlTelInputGlobals = T
     }
     var S, x = (t, e) => {
        let i = new L(t, e);
        return i._init(), t.setAttribute("data-intl-tel-input-id", i.id.toString()), window.intlTelInputGlobals.instances[i.id] = i, i
     };
     return l(o)
  })().default
});